#!/bin/sh

[ -n "$DEBUG" ] && set -x

set -e

file="tmp/rubygems-dump.sql.gz"

show_help() {
  cat << EOF
Usage: ${0##*/} <command> [args] [-h] [-e]

Download and load a rubygems.org PostgreSQL dump into current rails database

    -h          display this help and exit
    -e          Rails environment to import rubygems.org dump

Available Commands

  import        Download and restore the latest rubygems.org to PostgreSQL
  fetch         Download the latest rubygems.org dump
  load          Restore a rubygems.org dump to PostgreSQL

EOF

exit 0
}

[ -z $1 ] && show_help

cmdname=$1; shift

while getopts 'he:' opt; do
  case "${opt}" in
    h) show_help ;;
    e) environment=$OPTARG ;;
    \?)
      echo "Unexpected option ${flag}"
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

dump__load() {
  [ -n "$1" ] && file=$1
  [ -z "$environment" ] && environment=development

  if [[ ! -f "${file}" ]]; then
    echo "Could not read ${file}"
    exit 1
  fi

  echo "Running migrations"
  bundle exec rake db:migrate

  echo "Droppping gem tables"
  echo "DROP TABLE IF EXISTS dependencies, gem_downloads, linksets, rubygems, versions CASCADE; CREATE EXTENSION IF NOT EXISTS hstore;" | bundle exec rails db -e "${environment}"

  echo "Importing ${file}"
  tar xOf "${file}" | gunzip -c | bundle exec rails db -e "${environment}"

  echo "Succesfully restored dump file."
}

dump__fetch() {
  local base_url="https://s3-us-west-2.amazonaws.com/rubygems-dumps/"
  local prefix="production/public_postgresql"

  [ -n "$1" ] && file=$1

  key=$(curl -s "${base_url}?prefix=${prefix}" | sed -ne 's/.*<Key>\(.*\)<\/Key>.*/\1/p')
  latest_url="${base_url}${key}"
  echo "Downloading ${latest_url} to ${file}"
  curl --progress-bar "${latest_url}" > ${file}
}

dump__import() {
  dump__fetch
  dump__load
}

if type "dump__$cmdname" >/dev/null 2>&1; then
  "dump__$cmdname" "$@"
else
  echo "command $cmdname not recognized. See '${0##*/} -h'" >&2
  exit 1
fi